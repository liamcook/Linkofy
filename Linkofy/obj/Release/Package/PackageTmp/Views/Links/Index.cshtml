@model PagedList.IPagedList<Linkofy.Models.Link>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Index";
}
    @section Styles {
    <link href="@Url.Content("~/Styles/Index.css")" rel="stylesheet" type="text/css" />
}

<h1>Links Built</h1>

<p class="options"> @Html.ActionLink("Add New", "Create")  |   @Html.ActionLink("Add Bulk", "CreateBulk") </p>

          <div class="row">
    <div class="col-md-12">
        <table class="filterow">
            <tr>
                <th><a class="btn btn-default" @Html.ActionLink("Check Links", "CheckLinks","Links")</a></th>
                @using (Html.BeginForm())
                {
                <th>Filter Domains: @Html.TextBox("DomString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
                @using (Html.BeginForm())
                {
                <th>Find by Contact: @Html.TextBox("NameString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
                @using (Html.BeginForm())
                {
                <th>Filter Topics: @Html.TextBox("TopicString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
            </tr>
            </table>
                </div>
      </div>
       <div class="row">
            <div class="col-md-12">

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Domain", "Index", new { sortOrder = ViewBag.DomainSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Linking Page", "Index", new { sortOrder = ViewBag.LinkSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
                <th>
            @Html.ActionLink("Client", "Index", new { sortOrder = ViewBag.ClientSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Outbound Page", "Index", new { sortOrder = ViewBag.OBSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Anchor Text", "Index", new { sortOrder = ViewBag.AnchorSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
                <th>
            @Html.ActionLink("Type", "Index", new { sortOrder = ViewBag.TypeSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
                        <th>
            @Html.ActionLink("Live", "Index", new { sortOrder = ViewBag.LiveSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Build Date", "Index", new { sortOrder = ViewBag.BuildSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th></th>
    </tr>

@foreach (var item in Model.Where(p=>p.UserTable.ID == ViewBag.UserTableID)) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Identifier.domain)
        </td>
        <td>
            @if (item.Obdomain.Length >= 25){
            @Html.DisplayFor(modelItem => item.Obdomain).ToString().Substring(0,25) }
            @if (item.Obdomain.Length <= 25){ @Html.DisplayFor(modelItem => item.Obdomain) }
        </td>
                <td>
            @Html.DisplayFor(modelItem => item.Client.clientN)
        </td>
        <td>
            @if (item.Obpage.Length >= 25){
            @Html.DisplayFor(modelItem => item.Obpage).ToString().Substring(0,25) }
            @if (item.Obpage.Length <= 25){ @Html.DisplayFor(modelItem => item.Obpage) }
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Anchor)
        </td>
                        <td>
            @Html.DisplayFor(modelitem => item.Identifier.type)
        </td>
        <td>
            @if (item.live.ToString() == "Yes"){ 
            <label class="label label-success"> @Html.DisplayFor(modelitem => item.live) </label>
            }
            @if (item.live.ToString() == "No") {
            <label class="label label-danger"> @Html.DisplayFor(modelitem => item.live) </label>
            }

        </td>
        <td>
            @Html.DisplayFor(modelItem => item.BuildDate.Date)
        </td>
        <td>
            <a class="glyphicon glyphicon-check" href='@string.Format("{0}{1}", item.Identifier.domain, item.Obdomain)' target="_blank">
            @Html.ActionLink(" ", "Details", new { id=item.LinkID }, new {@class= "glyphicon glyphicon-home" })
            @Html.ActionLink(" ", "Edit", new { id=item.LinkID }, new {@class= "glyphicon glyphicon-edit" }) 
            @Html.ActionLink(" ", "Delete", new { id=item.LinkID }, new {@class= "glyphicon glyphicon-trash" })
        </td>
    </tr>
}
</table>
                                        <br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", 
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                </div>
           </div>