@model PagedList.IPagedList<Linkofy.Models.Identifier>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Index";
}
    @section Styles {
    <link href="@Url.Content("~/Styles/Index.css")" rel="stylesheet" type="text/css" />
}

<h1>Domain List</h1>

<p class="options"> @Html.ActionLink("Add New", "Create")   |   @Html.ActionLink("Add Bulk", "CreateBulk") </p>

      <div class="row">
    <div class="col-md-12">
        <table class="filterow">
            <tr>
                @using (Html.BeginForm())
                {
                <th>Filter Domains: @Html.TextBox("DomString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
                @using (Html.BeginForm())
                {
                <th>Find by Contact: @Html.TextBox("NameString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
                @using (Html.BeginForm())
                {
                <th>Filter Topics: @Html.TextBox("TopicString") </th>
                <th><input type="submit" value="Search" class="btn btn-default" /></th>
                }
            </tr>
            </table>
                </div>
      </div>

       <div class="row">
            <div class="col-md-12">
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Domain", "Index", new { sortOrder = ViewBag.DomainSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Contact Email", "Index", new { sortOrder = ViewBag.ContactESortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Contact Name", "Index", new { sortOrder = ViewBag.ContNSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.PriceSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Type of Link", "Index", new { sortOrder = ViewBag.TypeSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
                <th>
            @Html.ActionLink("TF", "Index", new { sortOrder = ViewBag.TFSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("CF", "Index", new { sortOrder = ViewBag.CFSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("RIPs", "Index", new { sortOrder = ViewBag.RISortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
                <th>
           @Html.ActionLink("Topic", "Index", new { sortOrder = ViewBag.MJSortParm, currentFilter=ViewBag.CurrentFilter })
        </th>
        <th></th>
    </tr>

@foreach (var item in Model.Where(p=>p.UserTable.ID == ViewBag.UserTableID)) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.domain)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.contact)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.contactname)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.price)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.type)
        </td>
                <td>
            @Html.DisplayFor(modelItem => item.TrustFlow)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CitationFlow)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.RI)
        </td>
                <td>
            @Html.DisplayFor(modelItem => item.MJTopics.topicalTF)
        </td>
        <td>
            @Html.ActionLink(" ", "Details", new { id=item.ID }, new {@class= "glyphicon glyphicon-home" })
            @Html.ActionLink(" ", "SendMail", new { id=item.ID }, new {@class= "glyphicon glyphicon-envelope" })
            @Html.ActionLink(" ", "Available", new { id=item.ID }, new {@class= "glyphicon glyphicon-list-alt" })
            @Html.ActionLink(" ", "Edit", new { id=item.ID }, new {@class= "glyphicon glyphicon-edit" }) 
            @Html.ActionLink(" ", "Delete", new { id=item.ID }, new {@class= "glyphicon glyphicon-trash" })
        </td>                 
    </tr>
}
</table>
                                    <br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", 
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                                </div>
        </div>
